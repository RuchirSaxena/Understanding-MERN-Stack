Step 1: Setup Server
Install below dependincies
============================
npm i express mongoose passport passport-jwt jsonwebtoken body-parser bcryptjs validator

Install dev dependincies
========================
 npm i nodemon  

Create Scipts in package.json to run them  
========================================
 "scripts": {
    "start": "node server.js",
    "server": "nodemon server.js"
  },

The above scripts added in package.json file , so that we can run them 
instead of typing commands manaully to run them each time
Eg:
  node server.js  ====> npm run start
  nodemon server.js  =====> npm run server

Step 2: MongoDB Setup
======================
Create a folder for keeping the configuration settions for mongo MongoDB
=>config 
and add a key.json file inside it and write your configuation inside it  

module.exports={
    mongoURI:'mongodb://<dbuser>:<dbpassword>@ds143593.mlab.com:43593/devconnectordb'
}

code in server.js to connect to mongoDB (mlab)
===============================================
const mongoose = require("mongoose");

//DB Config
const db = require("./config/keys").mongoURI;

// Connect to MongoDB Database
mongoose
  .connect(db)
  .then(() => console.log("MongoDB Connected Sucessfully :)"))
  .catch(err => console.log(err));

Step 3:Routing Setup
=======================

In API folder user.js and same code for other routes of appiction for diffrent modules
--------------------------------------------------------------------------------------
const express = require("express");
const router = express.Router();

// @route GET api/users/test
// @desc  Test user route
// @access Public
router.get("/test", (req, res) => res.json({ msg: "user route works" }));

module.exports = router;
--------------------------------------------------
In server.js setting up files module wise routing
---------------------------------------------------
const users = require("./routes/api/users");
const profiles = require("./routes/api/profile");
const posts = require("./routes/api/post");


//Use Routes and setup the base url of API i.e./api/users/<your router>
app.use("/api/users", users);
app.use("/api/profiles", profiles);
app.use("/api/posts", posts);

Step 4: Mongoose Model setup
================================

So Mongoose is used to create model for our DB i.e. each collection in our 
mongoDB will correspond to a model in mongoose , its like ER Modelling 

For this we will :
=> Create a new folder in root directory by the name :modules
=> Then we will create the files inside this folder corresponding to our model eg.User.js
=> In User.js below we are creating a schema for the User Model
----------------------------------------------------------------
const mongoose = require("mongoose");
const Schema = mongoose.Schema;

//Create Schema
const UserSchema = new Schema({
  name: {
    type: String,
    required: true
  },
  email: {
    type: String,
    required: true
  },
  password: {
    type: String,
    required: true
  },
  avatar: {
    type: String,
    required: true
  },
  date: {
    type: Date,
    default: Date.now
  }
});

module.exports = User = mongoose.model("users", UserSchema);

=>then we will import this file in our api folder inside user api file to create 
a route against it , basicall whaterver routes will be required for intrecting with this 
User Model from our API routes e.g. CURD

In api/user.js 
----------------
const express = require("express");
const router = express.Router();

//Load user model
const User = require("../../models/User");

// @route GET api/users/register
// @desc  Register user
// @access Public
router.post("/register", (req, res) => {
  //To find the first matching record
  User.findOne({ email: req.body.email }).then(user => {
    if (user) {
      return res.status(400).json({ email: "Email already exists" });
    } else {
      const newUser = new User({
        name: req.body.name,
        email: req.body.email,
        avatar: req.body.avatar,
        password: req.body.password
      });
    }
  });
});

module.exports = router;


Step 5 : Autentication using JWT and passport
================================================
For this we will create a new route for login eg: api/users/login
and then do authentication using JWT

In user.js 
---------------

const express = require("express");
const router = express.Router();
const gravatar = require("gravatar");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

//Load user model
const User = require("../../models/User");

//Get sceret key from config
const sceretKey = require("../../config/keys").secretKey;

router.post("/login", (req, res) => {
  const email = req.body.email;
  const password = req.body.password;
  console.log(password);

  // Find the user by email
  User.findOne({ email }).then(user => {
    //check for user exists
    console.log(user);
    if (!user) {
      return res.status(404).json({ email: "user not found" });
    }

    // check user creadentials i.e. password
    bcrypt.compare(password, user.password).then(isMatch => {
      if (isMatch) {
        //  res.json({ msg: "Success" });
        //User Matched => Create JWT Token
        const payload = {
          id: user.id,
          name: user.name,
          avatar: user.avatar
        };
        //Sign Token
        jwt.sign(payload, sceretKey, { expiresIn: 3600 }, (err, token) => {
          res.json({
            success: true,
            token: "Bearer " + token
          });
        });
      } else {
        return res.status(400).json({ password: "password incorrect" });
      }
    });
  });
});

Above we are generating the token(with user info) using JWT but to varify that token we need to use passport
below are the steps requred to implement passport

1.In server.js
---------------
const passport = require("passport");
//Passport middleware
app.use(passport.initialize());

In passport.js
-----------------
const JwtStrategy = require("passport-jwt").Strategy;
const ExtractJwt = require("passport-jwt").ExtractJwt;
const mongoose = require("mongoose");
const User = mongoose.model("users");
const keys = require("./keys");

const options = {};
options.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();
options.secretOrKey = keys.secretKey;

module.exports = passport => {
  passport.use(
    new JwtStrategy(options, (jwt_payload, done) => {
      console.log(jwt_payload);
      User.findById(jwt_payload.id)
        .then(user => {
          if (user) {
            return done(null, user);
          }
          return done(null, false);
        })
        .catch(err => console.log(err));
    })
  );
};

Inside config/keys.js 
----------------------
module.exports = {
   secretKey: "secret"
};

In user.js (API) to create protected routes
-------------------------------------------
const passport = require("passport");

//Get sceret key from config
const sceretKey = require("../../config/keys").secretKey; //returns any random text eg:sceret

//Protected routes creation

// @route GET api/users/current
// @desc  Return current user
// @access Private
router.get(
  "/current",
  passport.authenticate("jwt", { session: false }),
  (req, res) => {
    console.log("returning the user info");
    const { id, name, email } = req.user;
    res.json({
      id,
      name,
      email
    });
  }
);

Similar to Above Step 5 we can create profile api routes
============================================================
The steps involved will be .
1.Create model for profile using mongoose.
2.Add validation using validator library.
3.Create routes for getting and creating a user profile 

1. In Profile.js //Model Creation
-----------------------------------
const mongoose = require("mongoose");
const Schema = mongoose.Schema;

//create Schema
const ProfileSchema = new Schema({
  user: {
    type: Schema.Types.ObjectId,
    ref: "users"
  },
  handle: {
    type: String,
    required: true,
    max: 40
  },
  company: {
    type: String
  },
  location: {
    type: String
  },
  status: {
    type: String,
    required: true
  },
  skills: {
    type: [String],
    required: true
  },
  website: {
    type: String
  },
  bio: {
    type: String
  },
  githubusername: {
    type: String
  },
  experince: [
    {
      title: {
        type: String,
        required: true
      },
      location: {
        type: String
      },
      from: {
        type: Date,
        required: true
      },
      to: {
        type: Date
      },
      current: {
        type: Boolean,
        default: false
      },
      description: {
        type: String
      }
    }
  ],
  education: [
    {
      school: {
        type: String,
        required: true
      },
      degree: {
        type: String
      },
      feildOfStudy: {
        type: String,
        required: true
      },
      from: {
        type: Date,
        required: true
      },
      to: {
        type: Date
      },
      current: {
        type: Boolean,
        default: false
      },
      description: {
        type: String
      }
    }
  ],
  social: {
    youtube: {
      type: String
    },
    facebook: {
      type: String
    },
    twitter: {
      type: String
    },
    linkedin: {
      type: String
    },
    instagram: {
      type: String
    }
  },
  date: {
    type: Date,
    default: Date.now
  }
});
let Profile = mongoose.model("profile", ProfileSchema);

module.exports = Profile;

2.In validation/profile.js // Adding Validation
-------------------------------------------------
const Validator = require("validator");
const isEmpty = require("./is-empty");

module.exports = validateProfileInput = data => {
  let errors = {};

  data.handle = !isEmpty(data.handle) ? data.handle : "";
  data.status = !isEmpty(data.status) ? data.status : "";
  data.skills = !isEmpty(data.skills) ? data.skills : "";

  if (!Validator.isLength(data.handle, { min: 2, max: 40 })) {
    errors.handle = "Handle needs to be between 2 and 40 characters";
  }

  if (Validator.isEmpty(data.handle)) {
    errors.handle = "Profile handle is required";
  }

  if (Validator.isEmpty(data.status)) {
    errors.status = "Status fields is required";
  }

  if (Validator.isEmpty(data.skills)) {
    errors.skills = "Skills fields is required";
  }

  if (!isEmpty(data.website)) {
    if (!Validator.isURL(data.website)) {
      errors.skills = "Website address is incorrect";
    }
  }

  if (!isEmpty(data.website)) {
    if (!Validator.isURL(data.website)) {
      errors.skills = "Website address is incorrect";
    }
  }
  if (!isEmpty(data.youtube)) {
    if (!Validator.isURL(data.youtube)) {
      errors.skills = "Not a valid URL";
    }
  }
  if (!isEmpty(data.twitter)) {
    if (!Validator.isURL(data.twitter)) {
      errors.skills = "Not a valid URL";
    }
  }
  if (!isEmpty(data.facebook)) {
    if (!Validator.isURL(data.facebook)) {
      errors.skills = "Not a valid URL";
    }
  }
  if (!isEmpty(data.linkedin)) {
    if (!Validator.isURL(data.linkedin)) {
      errors.skills = "Not a valid URL";
    }
  }
  if (!isEmpty(data.instagram)) {
    if (!Validator.isURL(data.instagram)) {
      errors.skills = "Not a valid URL";
    }
  }

  return {
    errors,
    isValid: isEmpty(errors)
  };
};

3. In api/profile.js //Creating diffrent routes 
---------------------------------------------------
const express = require("express");
const router = express.Router();
const mongoose = require("mongoose");
const passport = require("passport");

//Load profile Model
const Profile = require("../../models/Profile");
//Load profile Validation
const validationProfileInput = require("../../validation/profile");

//Load user Model
const User = require("../../models/User");

// @route GET api/profiles/test
// @desc  Test profile route
// @access Public
router.get("/test", (req, res) => {
  res.json({ msg: "profile route works!" });
});

// @route GET api/profiles/:id
// @desc  Get current user profile
// @access Private
router.get(
  "/",
  passport.authenticate("jwt", { session: false }),
  (req, res) => {
    const errors = {};
    // console.log("response:" + req.user);

    Profile.findOne({ user: req.user.id })
      .populate("user", ["name", "avatar"]) //Used to get data from User data(name,avatax) collection 
      .then(profile => {
        if (!profile) {
          errors.noprofile = "There is no profile for this user";
          return res.status(404).json(errors);
        }
        res.json(profile);
      })
      .catch(err => res.status(404).json(err));
  }
);

// @route POST api/profiles/
// @desc  Create/Update current user profile
// @access Private
router.post(
  "/",
  passport.authenticate("jwt", { session: false }),
  (req, res) => {
    //Validdation
    const { errors, isValid } = validationProfileInput(req.body);
    //check validation
    if (!isValid) {
      // console.log(`Error ${errors}`);
      return res.status(400).json(errors);
    }

    // Get fields
    // console.log(req.body);
    const profileFields = {};
    profileFields.user = req.user.id;
    if (req.body.handle) profileFields.handle = req.body.handle;
    if (req.body.status) profileFields.status = req.body.status;
    if (req.body.company) profileFields.company = req.body.company;
    if (req.body.website) profileFields.website = req.body.website;
    if (req.body.location) profileFields.location = req.body.location;
    if (req.body.bio) profileFields.bio = req.body.bio;
    if (req.body.githubusername)
      profileFields.githubusername = req.body.githubusername;
    // Skills -spilit into array
    if (typeof req.body.skills !== "undefined") {
      profileFields.skills = req.body.skills.split(",");
    }
    // Social
    profileFields.social = {};
    if (req.body.youtube) profileFields.social.youtube = req.body.youtube;
    if (req.body.twitter) profileFields.social.twitter = req.body.twitter;
    if (req.body.facebook) profileFields.social.facebook = req.body.facebook;
    if (req.body.linkedin) profileFields.social.linkedin = req.body.linkedin;
    if (req.body.instagram) profileFields.social.instagram = req.body.instagram;

    Profile.findOne({ user: req.user.id }).then(profile => {
      if (profile) {
        console.log(`Post data ${profile}`);
        // Update profile
        Profile.findOneAndUpdate(
          { user: req.user.id },
          { $set: profileFields },
          { new: true }
        ).then(profile => res.json(profile));
      } else {
        //create profile

        Profile.findOne({ handle: profileFields.handle }).then(profile => {
          //First : Check if handle exists
          if (profile) {
            erros.handle = "That handle already exists";
            res.status(400).json(errors);
          }
          //Second : If not exists then => Save Profile
          //console.log("line 100:", profileFields);
          new Profile(profileFields).save().then(profile => res.json(profile));
        });
      }
    });
  }
);

module.exports = router;


Client Code Implemention
============================

After setting up React, We Implement React Router
=====================================================
Step 1: Setting app using create-react-app
Step 2: Adding components related to app
Step 3: Adding React-Router

1. In app.js
----------------
//React Router
import { BrowserRouter as Router, Route, Link } from "react-router-dom";

  <Router>
          <div className="App">
            <Navbar />
            <Route exact path="/" component={Landing} />
            <div className="container">
              <Route exact path="/register" component={Register} />
              <Route exact path="/login" component={Login} />
            </div>
            <Footer />
          </div>
        </Router>

2. 
//Adding Links from where we want to create links from diffrent parts of App
Eg: in landing.js

 <Link to="/register" className="btn btn-lg btn-info mr-2">
      Sign Up
</Link>
<Link to="/login" className="btn btn-lg btn-light">
      Login
</Link>

Step 4: Adding validations using module => classnames

import classnames from "classnames";

  <input
      type="text"
      className={classnames("form-control from-control-lg", {
      "is-invalid": errors.name
      })}
      placeholder="Name"
      name="name"
      value={this.state.name}
      onChange={this.onChange}
      />
      {errors.name && (
         <div className="invalid-feedback">{errors.name} </div>
      )}

 Step 5: Adding Redux for state management
 1.//Redux imports
import { Provider } from "react-redux";

 <Provider store={store}>
    <Router>
        //Adding components
            <div className="App">
            <Navbar />
            <Route exact path="/" component={Landing} />
            <div className="container">
              <Route exact path="/register" component={Register} />
              <Route exact path="/login" component={Login} />
            </div>
            <Footer />
          </div>
    </Router>
 </Provider>

2. Creating store
In store.js
---------------
import { createStore, applyMiddleware, compose } from "redux";
import thunk from "redux-thunk";
import rootReducer from "../reducers/reducers";

const initialState = {};

const middleware = [thunk];

const store = createStore(
  rootReducer,
  initialState,
  compose(
    applyMiddleware(...middleware),
    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
  )
);

export default store;

2.Creating root reducer

import { createStore, applyMiddleware, compose } from "redux";
import thunk from "redux-thunk";
import rootReducer from "../reducers/reducers";

const initialState = {};

const middleware = [thunk];
In reducers.js
-----------------
const store = createStore(
  rootReducer,
  initialState,
  compose(
    applyMiddleware(...middleware),
    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
  )
);

export default store;

3. Adding reducers 
In authReducer.js
---------------------

import { createStore, applyMiddleware, compose } from "redux";
import thunk from "redux-thunk";
import rootReducer from "../reducers/reducers";

const initialState = {};

const middleware = [thunk];

const store = createStore(
  rootReducer,
  initialState,
  compose(
    applyMiddleware(...middleware),
    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
  )
);

export default store;



 











============
Side Note:
============
If we have commited unwanted files without adding them to the .gitignore ,
then we cannot these files in futere by adding them to the git ,
But we need to run below commands to remove the future tracking of these files  

 git rm -r --cached .
 git add .
git commit -m "Clean up ignored files"



