Step 1: Setup Server
Install below dependincies
============================
npm i express mongoose passport passport-jwt jsonwebtoken body-parser bcryptjs validator

Install dev dependincies
========================
 npm i nodemon  

Create Scipts in package.json to run them  
========================================
 "scripts": {
    "start": "node server.js",
    "server": "nodemon server.js"
  },

The above scripts added in package.json file , so that we can run them 
instead of typing commands manaully to run them each time
Eg:
  node server.js  ====> npm run start
  nodemon server.js  =====> npm run server

Step 2: MongoDB Setup
======================
Create a folder for keeping the configuration settions for mongo MongoDB
=>config 
and add a key.json file inside it and write your configuation inside it  

module.exports={
    mongoURI:'mongodb://<dbuser>:<dbpassword>@ds143593.mlab.com:43593/devconnectordb'
}

code in server.js to connect to mongoDB (mlab)
===============================================
const mongoose = require("mongoose");

//DB Config
const db = require("./config/keys").mongoURI;

// Connect to MongoDB Database
mongoose
  .connect(db)
  .then(() => console.log("MongoDB Connected Sucessfully :)"))
  .catch(err => console.log(err));

Step 3:Routing Setup
=======================

In API folder user.js and same code for other routes of appiction for diffrent modules
--------------------------------------------------------------------------------------
const express = require("express");
const router = express.Router();

// @route GET api/users/test
// @desc  Test user route
// @access Public
router.get("/test", (req, res) => res.json({ msg: "user route works" }));

module.exports = router;
--------------------------------------------------
In server.js setting up files module wise routing
---------------------------------------------------
const users = require("./routes/api/users");
const profiles = require("./routes/api/profile");
const posts = require("./routes/api/post");


//Use Routes and setup the base url of API i.e./api/users/<your router>
app.use("/api/users", users);
app.use("/api/profiles", profiles);
app.use("/api/posts", posts);

Step 4: Mongoose Model setup
================================

So Mongoose is used to create model for our DB i.e. each collection in our 
mongoDB will correspond to a model in mongoose , its like ER Modelling 

For this we will :
=> Create a new folder in root directory by the name :modules
=> Then we will create the files inside this folder corresponding to our model eg.User.js
=> In User.js below we are creating a schema for the User Model
----------------------------------------------------------------
const mongoose = require("mongoose");
const Schema = mongoose.Schema;

//Create Schema
const UserSchema = new Schema({
  name: {
    type: String,
    required: true
  },
  email: {
    type: String,
    required: true
  },
  password: {
    type: String,
    required: true
  },
  avatar: {
    type: String,
    required: true
  },
  date: {
    type: Date,
    default: Date.now
  }
});

module.exports = User = mongoose.model("users", UserSchema);

=>then we will import this file in our api folder inside user api file to create 
a route against it , basicall whaterver routes will be required for intrecting with this 
User Model from our API routes e.g. CURD

In api/user.js 
----------------
const express = require("express");
const router = express.Router();

//Load user model
const User = require("../../models/User");

// @route GET api/users/register
// @desc  Register user
// @access Public
router.post("/register", (req, res) => {
  //To find the first matching record
  User.findOne({ email: req.body.email }).then(user => {
    if (user) {
      return res.status(400).json({ email: "Email already exists" });
    } else {
      const newUser = new User({
        name: req.body.name,
        email: req.body.email,
        avatar: req.body.avatar,
        password: req.body.password
      });
    }
  });
});

module.exports = router;






============
Side Note:
============
If we have commited unwanted files without adding them to the .gitignore ,
then we cannot these files in futere by adding them to the git ,
But we need to run below commands to remove the future tracking of these files  

 git rm -r --cached .
 git add .
git commit -m "Clean up ignored files"



